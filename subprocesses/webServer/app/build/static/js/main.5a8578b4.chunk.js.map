{"version":3,"sources":["components/Utils/Utils.js","components/TitleBar/Settings/entries/AddCommand.js","components/TitleBar/Settings/entries/ApiKey.js","components/TitleBar/Settings/entries/Emby.js","components/TitleBar/Settings/entries/ArchiveBox.js","components/TitleBar/Settings/entries/Docker.js","components/TitleBar/Settings/entries/Google.js","components/TitleBar/Settings/entries/GoogleHome.js","components/TitleBar/Settings/entries/Jackett.js","components/TitleBar/Settings/entries/Meraki.js","components/TitleBar/Settings/entries/Ombi.js","components/TitleBar/Settings/entries/PiHole.js","components/TitleBar/Settings/entries/PioneerAVR.js","components/TitleBar/Settings/entries/RClone.js","components/TitleBar/Settings/entries/SabNZBD.js","components/TitleBar/Settings/entries/Sengled.js","components/TitleBar/Settings/entries/Transmission.js","components/TitleBar/Settings/Settings.js","components/TitleBar/RunCommand/RunCommand.js","components/TitleBar/BotInfo.js","components/TitleBar/TitleBar.js","components/Main/CommandButtons.js","components/Main/Main.js","components/App/App.js","index.js"],"names":["notify","message","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","className","transition","Flip","updateDB","name","config","a","fetch","method","headers","body","JSON","stringify","sendCommand","command","apiKey","localStorage","getItem","response","json","data","AddCommand","useState","commandName","setCommandName","setCommand","useGlobal","state","setState","handleSubmit","e","preventDefault","autoComplete","onSubmit","type","placeholder","value","required","onChange","target","ApiKey","setApiKey","setItem","Emby","db","emby","host","setHost","apikey","setApikey","userID","setUserID","ArchiveBox","archivebox","path","setPath","Docker","docker","Google","google","GoogleHome","googleHome","ip","setIP","language","setLanguage","setName","Jackett","jackett","Meraki","meraki","serielNum","setSerielNum","Ombi","ombi","username","setUsername","PiHole","pihole","PioneerAVR","pioneerAVR","RClone","rclone","remote","setRemote","SabNZBD","sabnzbd","Sengled","sengled","password","setPassword","jsessionid","jsessionID","setJsessionID","Transmission","transmission","port","setPort","ssl","setSSL","Settings","setDB","useEffect","then","trigger","modal","close","style","fontSize","cursor","onClick","RunCommand","display","gap","padding","gridTemplateColumns","border","backgroundColor","color","textAlign","height","BotInfo","setData","interval","setInterval","clearInterval","alignItems","src","avatar","alt","width","status","checkStatusCode","upTime","TitleBar","gridGap","CommandButtons","commandList","setCommandList","removeButton","id","renderedButtons","map","item","index","key","foo","Main","maxWidth","App","closeButton","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a8578b4.chunk.js","sourcesContent":["import { toast, Flip } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './Utils.css'\n\nconst notify = (message) =>\n  toast(message, {\n    position: 'bottom-center',\n    autoClose: 3000,\n    hideProgressBar: true,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    className: 'toast',\n    transition: Flip\n  })\n\nconst updateDB = async (name, config) => {\n  try {\n    await fetch('/api/db/app', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ config })\n    })\n    return notify(`Saved [ ${name} ] config`)\n  } catch {\n    return notify('There was an error connecting.')\n  }\n}\n\nconst sendCommand = async (command) => {\n  const apiKey = localStorage.getItem('apiKey') || ''\n  try {\n    const response = await fetch('/api/commands', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ apiKey, command })\n    })\n    const data = await response.json()\n    return notify(data.response)\n  } catch {\n    return notify('There was an error connecting.')\n  }\n}\n\nexport { notify, sendCommand, updateDB }\n","import React, { useState, useGlobal } from 'reactn'\nimport { notify } from '../../../Utils/Utils'\n\nconst AddCommand = () => {\n  const [commandName, setCommandName] = useState('')\n  const [command, setCommand] = useState('')\n  const [state, setState] = useGlobal('state')\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n\n    fetch('/api/db/ui', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify([commandName, command])\n    })\n    notify(`Added [Name: ${commandName} ] [Command: ${command} ]`)\n    setCommand('')\n    setCommandName('')\n    setState(state - 1)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Add Command</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Name\"\n          name=\"commandName\"\n          value={commandName}\n          required={true}\n          onChange={(e) => setCommandName(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Command\"\n          name=\"command\"\n          value={command}\n          required={true}\n          onChange={(e) => setCommand(e.target.value)}\n        />\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"+\" />\n      </form>\n    </div>\n  )\n}\n\nexport default AddCommand\n","import React, { useState } from 'reactn'\nimport { notify } from '../../../Utils/Utils'\n\nconst ApiKey = () => {\n  const [apiKey, setApiKey] = useState('')\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    localStorage.setItem('apiKey', apiKey)\n    notify(`ApiKey set to [ ${apiKey} ]`)\n    setApiKey('')\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">WebUI ApiKey</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"API KEY\"\n          name=\"apiKey\"\n          value={apiKey}\n          required={true}\n          onChange={(e) => setApiKey(e.target.value)}\n        />\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"Save\" />\n      </form>\n    </div>\n  )\n}\n\nexport default ApiKey\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst Emby = () => {\n  const [db] = useGlobal('database')\n  const [host, setHost] = useState(db.emby.host)\n  const [apikey, setApikey] = useState(db.emby.apiKey)\n  const [userID, setUserID] = useState(db.emby.userID)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.emby = { host: host, apiKey: apikey, userID: userID }\n    await updateDB('Emby', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Emby</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Host\"\n          name=\"host\"\n          value={host}\n          required={true}\n          onChange={(e) => setHost(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"ApiKey\"\n          name=\"apikey\"\n          value={apikey}\n          required={true}\n          onChange={(e) => setApikey(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"userID\"\n          name=\"userID\"\n          value={userID}\n          required={true}\n          onChange={(e) => setUserID(e.target.value)}\n        />\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default Emby\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst ArchiveBox = () => {\n  const [db] = useGlobal('database')\n  const [path, setPath] = useState(db.archivebox.path)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.archivebox = { path: path }\n    await updateDB('Archive Box', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Archive Box</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"path\"\n          name=\"path\"\n          value={path}\n          required={true}\n          onChange={(e) => setPath(e.target.value)}\n        />\n\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default ArchiveBox\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst Docker = () => {\n  const [db] = useGlobal('database')\n  const [host, setHost] = useState(db.docker.host)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.docker = { host: host }\n    await updateDB('Docker', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Docker</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Host\"\n          name=\"host\"\n          value={host}\n          required={true}\n          onChange={(e) => setHost(e.target.value)}\n        />\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default Docker\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst Google = () => {\n  const [db] = useGlobal('database')\n  const [apikey, setApikey] = useState(db.google.apiKey)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.google = { apiKey: apikey }\n    await updateDB('Google', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Google</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"ApiKey\"\n          name=\"apikey\"\n          value={apikey}\n          required={true}\n          onChange={(e) => setApikey(e.target.value)}\n        />\n\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default Google\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst GoogleHome = () => {\n  const [db] = useGlobal('database')\n  const [ip, setIP] = useState(db.googleHome.ip)\n  const [language, setLanguage] = useState(db.googleHome.language)\n  const [name, setName] = useState(db.googleHome.name)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.googleHome = { ip: ip, language: language, name: name }\n    await updateDB('Google Home', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Google Home</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"IP\"\n          name=\"ip\"\n          value={ip}\n          required={true}\n          onChange={(e) => setIP(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Language\"\n          name=\"language\"\n          value={language}\n          required={true}\n          onChange={(e) => setLanguage(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Name\"\n          name=\"name\"\n          value={name}\n          required={true}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default GoogleHome\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst Jackett = () => {\n  const [db] = useGlobal('database')\n  const [host, setHost] = useState(db.jackett.host)\n  const [apikey, setApikey] = useState(db.jackett.apiKey)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.jackett = { host: host, apiKey: apikey }\n    await updateDB('Jackett', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Jackett</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Host\"\n          name=\"host\"\n          value={host}\n          required={true}\n          onChange={(e) => setHost(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"ApiKey\"\n          name=\"apikey\"\n          value={apikey}\n          required={true}\n          onChange={(e) => setApikey(e.target.value)}\n        />\n\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default Jackett\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst Meraki = () => {\n  const [db] = useGlobal('database')\n  const [serielNum, setSerielNum] = useState(db.meraki.serielNum)\n  const [apikey, setApikey] = useState(db.meraki.apiKey)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.meraki = { serielNum: serielNum, apiKey: apikey }\n    await updateDB('Meraki', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Meraki</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"ApiKey\"\n          name=\"apiKey\"\n          value={apikey}\n          required={true}\n          onChange={(e) => setApikey(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Seriel Number\"\n          name=\"serielNum\"\n          value={serielNum}\n          required={true}\n          onChange={(e) => setSerielNum(e.target.value)}\n        />\n\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default Meraki\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst Ombi = () => {\n  const [db] = useGlobal('database')\n  const [host, setHost] = useState(db.ombi.host)\n  const [apikey, setApikey] = useState(db.ombi.apiKey)\n  const [username, setUsername] = useState(db.ombi.username)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.ombi = { host: host, apiKey: apikey, username: username }\n    await updateDB('Emby', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Ombi</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Host\"\n          name=\"host\"\n          value={host}\n          required={true}\n          onChange={(e) => setHost(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"ApiKey\"\n          name=\"apikey\"\n          value={apikey}\n          required={true}\n          onChange={(e) => setApikey(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Username\"\n          name=\"username\"\n          value={username}\n          required={true}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default Ombi\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst PiHole = () => {\n  const [db] = useGlobal('database')\n  const [host, setHost] = useState(db.pihole.host)\n  const [apikey, setApikey] = useState(db.pihole.apiKey)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.pihole = { host: host, apiKey: apikey }\n    await updateDB('PiHole', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">PiHole</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Host\"\n          name=\"host\"\n          value={host}\n          required={true}\n          onChange={(e) => setHost(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"ApiKey\"\n          name=\"apikey\"\n          value={apikey}\n          required={true}\n          onChange={(e) => setApikey(e.target.value)}\n        />\n\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default PiHole\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst PioneerAVR = () => {\n  const [db] = useGlobal('database')\n  const [host, setHost] = useState(db.pioneerAVR.host)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.pioneerAVR = { host: host }\n    await updateDB('PioneerAVR', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Pioneer AVR</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Host\"\n          name=\"host\"\n          value={host}\n          required={true}\n          onChange={(e) => setHost(e.target.value)}\n        />\n\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default PioneerAVR\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst RClone = () => {\n  const [db] = useGlobal('database')\n  const [remote, setRemote] = useState(db.rclone.remote)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.rclone = { remote: remote }\n    await updateDB('RClone', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">RClone</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Remote\"\n          name=\"remote\"\n          value={remote}\n          required={true}\n          onChange={(e) => setRemote(e.target.value)}\n        />\n\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default RClone\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst SabNZBD = () => {\n  const [db] = useGlobal('database')\n  const [host, setHost] = useState(db.sabnzbd.host)\n  const [apikey, setApikey] = useState(db.sabnzbd.apiKey)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.sabnzbd = { host: host, apiKey: apikey }\n    await updateDB('sabNZBD', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">sabNZBD</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Host\"\n          name=\"host\"\n          value={host}\n          required={true}\n          onChange={(e) => setHost(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"ApiKey\"\n          name=\"apikey\"\n          value={apikey}\n          required={true}\n          onChange={(e) => setApikey(e.target.value)}\n        />\n\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default SabNZBD\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst Sengled = () => {\n  const [db] = useGlobal('database')\n  const [username, setUsername] = useState(db.sengled.username)\n  const [password, setPassword] = useState(db.sengled.password)\n  const [jsessionID, setJsessionID] = useState(db.sengled.jsessionid)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.sengled = { username: username, password: password, jsessionid: jsessionID }\n    await updateDB('Emby', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Sengled Lights</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Username\"\n          name=\"username\"\n          value={username}\n          required={true}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Password\"\n          name=\"pass\"\n          value={password}\n          required={true}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"JSessionID\"\n          name=\"sessionID\"\n          value={jsessionID}\n          required={true}\n          onChange={(e) => setJsessionID(e.target.value)}\n        />\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default Sengled\n","import React, { useState, useGlobal } from 'reactn'\nimport { updateDB } from '../../../Utils/Utils'\n\nconst Transmission = () => {\n  const [db] = useGlobal('database')\n  const [host, setHost] = useState(db.transmission.host)\n  const [port, setPort] = useState(db.transmission.port)\n  const [ssl, setSSL] = useState(db.transmission.ssl)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    db.transmission = { host: host, port: port, ssl: ssl }\n    await updateDB('Transmission', db)\n  }\n\n  return (\n    <div className=\"SettingsEntry\">\n      <span className=\"SettingsEntryTitle\">Transmission</span>\n      <form className=\"SettingsEntryForm\" autoComplete=\"off\" onSubmit={handleSubmit}>\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Host\"\n          name=\"host\"\n          value={host}\n          required={true}\n          onChange={(e) => setHost(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"Port\"\n          name=\"port\"\n          value={port}\n          required={true}\n          onChange={(e) => setPort(e.target.value)}\n        />\n        <input\n          className=\"SettingsEntryInput\"\n          type=\"text\"\n          placeholder=\"SSL ?\"\n          name=\"ssl\"\n          value={ssl}\n          required={true}\n          onChange={(e) => setSSL(e.target.value)}\n        />\n        <input className=\"SettingsEntryInput\" type=\"submit\" value=\"SAVE\" />\n      </form>\n    </div>\n  )\n}\n\nexport default Transmission\n","import React, { useGlobal, useEffect } from 'reactn'\nimport Popup from 'reactjs-popup'\nimport AddCommand from './entries/AddCommand'\nimport ApiKey from './entries/ApiKey'\nimport Emby from './entries/Emby'\nimport ArchiveBox from './entries/ArchiveBox'\nimport Docker from './entries/Docker'\nimport Google from './entries/Google'\nimport GoogleHome from './entries/GoogleHome'\nimport Jackett from './entries/Jackett'\nimport Meraki from './entries/Meraki'\nimport Ombi from './entries/Ombi'\nimport PiHole from './entries/PiHole'\nimport PioneerAVR from './entries/PioneerAVR'\nimport RClone from './entries/RClone'\nimport SabNZBD from './entries/SabNZBD'\nimport Sengled from './entries/Sengled'\nimport Transmission from './entries/Transmission'\n\nimport './Settings.css'\n\nconst Settings = () => {\n  // eslint-disable-next-line\n  const [db, setDB] = useGlobal('database')\n\n  useEffect(() => {\n    fetch('/api/db/app')\n      .then((response) => response.json())\n      .then((data) => setDB(data))\n  }, [setDB])\n\n  return (\n    <Popup trigger={<button className=\"TitleBarButton\">Settings</button>} modal>\n      {(close) => (\n        <div className=\"Settings\">\n          <div className=\"SettingsHeader\">\n            <span style={{ fontSize: '1rem' }}>Settings</span>\n            <span style={{ cursor: 'pointer' }} onClick={close}>\n              &times;\n            </span>\n          </div>\n          <div className=\"SettingsContainer\">\n            <ApiKey />\n            <AddCommand />\n            <ArchiveBox />\n            <Docker />\n            <Emby />\n            <Google />\n            <GoogleHome />\n            <Jackett />\n            <Meraki />\n            <Ombi />\n            <PiHole />\n            <PioneerAVR />\n            <RClone />\n            <SabNZBD />\n            <Sengled />\n            <Transmission />\n          </div>\n        </div>\n      )}\n    </Popup>\n  )\n}\n\nexport default Settings\n","import React, { useState } from 'reactn'\nimport { sendCommand } from '../../Utils/Utils'\nimport Popup from 'reactjs-popup'\n\nconst RunCommand = () => {\n  const [command, setCommand] = useState('')\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n\n    await sendCommand(command)\n    setCommand('')\n  }\n\n  return (\n    <Popup trigger={<button className=\"TitleBarButton\">Run</button>} modal>\n      {(close) => (\n        <div className=\"Settings\">\n          <div className=\"SettingsHeader\">\n            <span style={{ fontSize: '1rem' }}>Run Command</span>\n            <span style={{ cursor: 'pointer' }} onClick={close}>\n              &times;\n            </span>\n          </div>\n          <div className=\"SettingsContainer\">\n            <form\n              autoComplete=\"off\"\n              onSubmit={handleSubmit}\n              style={{\n                display: 'grid',\n                gap: '5px',\n                padding: '10px',\n                gridTemplateColumns: '250px 50px'\n              }}\n            >\n              <input\n                type=\"text\"\n                style={{\n                  border: 'none',\n                  fontSize: '0.7rem',\n                  backgroundColor: '#3E4245',\n                  color: '#dfdfdf',\n                  textAlign: 'center',\n                  height: '30px'\n                }}\n                placeholder=\"Command\"\n                name=\"command\"\n                value={command}\n                required={true}\n                onChange={(e) => setCommand(e.target.value)}\n              />\n              <input\n                type=\"submit\"\n                style={{\n                  border: 'none',\n                  fontSize: '0.7rem',\n                  backgroundColor: '#3E4245',\n                  color: '#757163',\n                  height: '30px'\n                }}\n                value=\"Run\"\n              />\n            </form>\n          </div>\n        </div>\n      )}\n    </Popup>\n  )\n}\nexport default RunCommand\n","import React, { useEffect, useState } from 'reactn'\n\nconst BotInfo = () => {\n  const [data, setData] = useState('')\n\n  useEffect(() => {\n    fetch('/api/info')\n      .then((response) => response.json())\n      .then((data) => setData(data))\n\n    const interval = setInterval(() => {\n      fetch('/api/info')\n        .then((response) => response.json())\n        .then((data) => setData(data))\n    }, 5000)\n    return () => clearInterval(interval)\n  }, [])\n\n  const checkStatusCode = (status) => {\n    switch (status) {\n      case 0:\n        return 'Ready'\n      case 1:\n        return 'Connecting'\n      case 2:\n        return 'Reconnecting'\n      case 3:\n        return 'Idle'\n      case 4:\n        return 'Nearly'\n      case 5:\n        return 'Disconnected'\n      default:\n        break\n    }\n  }\n\n  return (\n    <div\n      style={{\n        display: 'grid',\n        alignItems: 'center',\n        gap: '5px',\n        gridTemplateColumns: 'auto auto'\n      }}\n    >\n      <img src={data ? `${data.avatar}` : ''} alt=\"..\" style={{ width: '48px', height: '48px' }} />\n      <span>\n        {data ? `${data.username}` : '..'}\n        <br />\n        {data ? `${checkStatusCode(data.status)} ${data.upTime}` : '..'}\n      </span>\n    </div>\n  )\n}\n\nexport default BotInfo\n","import React from 'reactn'\nimport Settings from './Settings/Settings'\nimport RunCommand from './RunCommand/RunCommand'\nimport BotInfo from './BotInfo'\n\nimport './TitleBar.css'\n\nconst TitleBar = () => {\n  return (\n    <div className=\"TitleBar\">\n      <BotInfo />\n      <div style={{ display: 'grid', gridGap: '5px', gridTemplateColumns: 'auto auto' }}>\n        <RunCommand />\n        <Settings />\n      </div>\n    </div>\n  )\n}\n\nexport default TitleBar\n","import React, { useEffect, useGlobal } from 'reactn'\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from 'react-contextmenu'\nimport { sendCommand } from '../Utils/Utils'\n\nimport './CommandButtons.css'\n\nconst CommandButtons = () => {\n  const [commandList, setCommandList] = useGlobal('commandList')\n  const [state, setState] = useGlobal('state')\n\n  useEffect(() => {\n    fetch('/api/db/ui')\n      .then((response) => response.json())\n      .then((data) => setCommandList(data))\n    setState(1)\n    // eslint-disable-next-line\n  }, [state])\n\n  const removeButton = async (id) => {\n    setState(state + 1)\n    await fetch(`/api/db/ui/rm/${id}`, { method: 'POST' })\n  }\n\n  const renderedButtons = commandList\n    ? commandList.map((item, index) => {\n        const { id, name, command } = item\n        return (\n          <div key={index}>\n            <ContextMenuTrigger id={id}>\n              <button className=\"CommandButton\" onClick={async () => await sendCommand(command)}>\n                {name}\n              </button>\n            </ContextMenuTrigger>\n            <ContextMenu id={id}>\n              <MenuItem data={{ foo: 'bar' }} onClick={async () => await removeButton(id)}>\n                Delete\n              </MenuItem>\n            </ContextMenu>\n          </div>\n        )\n      })\n    : 'No shortcut commands set. Please add one below.'\n\n  return <div className=\"CommandButtonContainer\">{renderedButtons}</div>\n}\n\nexport default CommandButtons\n","import React from 'reactn'\n\nimport CommandButtons from './CommandButtons'\n\nconst Main = () => {\n  return (\n    <div style={{ height: '100%', maxWidth: '90%' }}>\n      <CommandButtons />\n    </div>\n  )\n}\n\nexport default Main\n","import React from 'reactn'\nimport './App.css'\n\nimport TitleBar from '../TitleBar/TitleBar'\nimport Main from '../Main/Main'\n\nimport { ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <TitleBar />\n      <Main />\n      <ToastContainer closeButton={false} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'reactn'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}